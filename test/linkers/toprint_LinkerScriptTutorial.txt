section [address] [(type)] : [AT(lma)]
  {
    output-section-command
    output-section-command
    …
  } [>region] [AT>lma_region] [:phdr :phdr …] [=fillexp]


4.6.8.1. Output Section Type

Each output section may have a type. The type is a keyword in parentheses. The following types are defined:

NOLOAD

    The section should be marked as not loadable, so that it will not be loaded into memory when the program is run. 
DSECT, COPY, INFO, OVERLAY

    These type names are supported for backward compatibility, and are rarely used. They all have the same effect: the section should be marked as not allocatable, so that no memory is allocated for the section when the program is run. 

The linker normally sets the attributes of an output section based on the input sections which map into it. You can override this by using the section type. For example, in the script sample below, the ROM section is addressed at memory location 0 and does not need to be loaded when the program is run. The contents of the ROM section will appear in the linker output file as usual.

SECTIONS {
  ROM 0 (NOLOAD) : { … }
  …
}

Example of loading of variables at anohter location at RUN time : ( Code automatically generated by the linker script ) 
extern char _etext, _data, _edata, _bstart, _bend;
char *src = &_etext;
char *dst = &_data;

/* ROM has data at end of text; copy it. */
while (dst < &_edata) {
  *dst++ = *src++;
}

/* Zero bss */
for (dst = &_bstart; dst< &_bend; dst++)
  *dst = 0;




--

For the MSP430 it is possible to select the MPU architecture. The flag -m [mpu type] will select an appropriate linker script for selected MPU type. (To get a list of known MPUs just pass -m help option to the linker).

The linker will recognize some extra sections which are MSP430 specific:

.vectors

    Defines a portion of ROM where interrupt vectors located. 
.bootloader

    Defines the bootloader portion of the ROM (if applicable). Any code in this section will be uploaded to the MPU. 
.infomem

    Defines an information memory section (if applicable). Any code in this section will be uploaded to the MPU. 
.infomemnobits

    This is the same as the .infomem section except that any code in this section will not be uploaded to the MPU. 
.noinit

    Denotes a portion of RAM located above .bss section.

    The last two sections are used by gcc


---------

5.3. ld's Support for Interworking Between ARM and Thumb Code

For the ARM, ld will generate code stubs to allow functions calls betweem ARM and Thumb code. These stubs only work with code that has been compiled and assembled with the -mthumb-interwork command line option. If it is necessary to link with old ARM object files or libraries, which have not been compiled with the -mthumb-interwork option then the -support-old-code command line switch should be given to the linker. This will make it generate larger stub functions which will work with non-interworking aware ARM code. Note, however, the linker does not support generating stubs for function calls to non-interworking aware Thumb code.

The -thumb-entry switch is a duplicate of the generic -entry switch, in that it sets the program's starting address. But it also sets the bottom bit of the address, so that it can be branched to using a BX instruction, and the program will start executing in Thumb mode straight away. 